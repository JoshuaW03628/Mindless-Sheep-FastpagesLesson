{
  
    
        "post0": {
            "title": "Tri 3 Lesson",
            "content": "Lesson Portion 1: ReIntroduction to Data Analysis, NunPy, and Pandas . Data Analysis. . Data Analysis is the process of examining data sets in order to find trends and draw conclusions about the given information. Data analysis is important because it helps businesses optimize their performances. . What is NunPy and Pandas . Pandas library involves a lot of data analysis in Python. NumPy Library is mostly used for working with numerical values and it makes it easy to apply with mathematical functions. . Lesson Portion 2 More into NunPy . What we are covering; . Explanation of NumPy and its uses in data analysis | Importing NumPy library | Creating NumPy arrays and performing intermediate array operations | Example of using NumPy for mathematical operations on data | . Explanation of NunPy and its use in Data Analysis . What is NunPy&#39;s use in data analysis/ how to import NunPy. . NumPy is a tool in Python that helps with doing math and data analysis. It&#39;s great for working with large amounts of data, like numbers in a spreadsheet. NumPy is really good at doing calculations quickly and accurately, like finding averages, doing algebra, and making graphs. It&#39;s used a lot by scientists and people who work with data because it makes their work easier and faster. . import numpy as np . Example of Using NunPy in Our Project . This code calculates the total plate appearances for a baseball player using NumPy&#39;s sum() function, similar to the original example. It then uses NumPy to calculate the total number of bases (hits plus walks) for the player, and divides that by the total number of plate appearances to get the on-base percentage. The results are then printed to the console. . import numpy as np # Example data player_hits = np.array([3, 1, 2, 0, 1, 2, 1, 2]) # Player&#39;s hits in each game player_walks = np.array([1, 0, 0, 1, 2, 1, 1, 0]) # Player&#39;s walks in each game player_strikeouts = np.array([2, 1, 0, 2, 1, 1, 0, 1]) # Player&#39;s strikeouts in each game # Intermediate array to store plate appearances (PA) for the player total_pa = np.sum(player_hits != 0) + np.sum(player_walks) + np.sum(player_strikeouts) # Intermediate array to store on-base percentage (OBP) for the player total_bases = np.sum(player_hits) + np.sum(player_walks) obp = total_bases / total_pa # Print the total plate appearances and on-base percentage for the player print(f&quot;Total plate appearances: {total_pa}&quot;) print(f&quot;On-base percentage: {obp:.3f}&quot;) . Total plate appearances: 21 On-base percentage: 0.857 . Activity 1; PopCorn Hacks; Creating a NunPy Array and Analyzing the Data using Array Operations . import numpy as np #Create a NumPy array of the heights of players in a basketball team heights = np.array([192, 195, 193, 200, 211, 199, 201, 198, 184, 190, 196, 203, 208, 182, 207]) # Calculate the percentile rank of each player&#39;s height percentiles = np.percentile(heights, [25, 50, 75]) # Print the results print(&quot;The 25th percentile height is&quot;, percentiles[0], &quot;cm.&quot;) print(&quot;The 50th percentile height is&quot;, percentiles[1], &quot;cm.&quot;) print(&quot;The 75th percentile height is&quot;, percentiles[2], &quot;cm.&quot;) # Determine the number of players who are in the top 10% tallest top_10_percent = np.percentile(heights, 90) tallest_players = heights[heights &gt;= top_10_percent] print(&quot;There are&quot;, len(tallest_players), &quot;players in the top 10% tallest.&quot;) . The 25th percentile height is 192.5 cm. The 50th percentile height is 198.0 cm. The 75th percentile height is 202.0 cm. There are 2 players in the top 10% tallest. . import numpy as np #Create a NumPy array of the x x = np.array([]) # Calculate the percentile rank of x y = np.percentile(x, [1,2,3]) # Print the results print(&quot;&quot;, percentiles[0], &quot;&quot;) print(&quot;&quot;, percentiles[1], &quot;&quot;) print(&quot;&quot;, percentiles[2], &quot;&quot;) # Determine the number of players who are in the top 10% x t = np.percentile(x, 90) z = x[x &gt;= t] print(&quot;There are&quot;, len(z), &quot;players in the top 10% (x).&quot;) . Lesson Portion 3 More into Pandas . Lesson Portion 4 . Activity 3: Incorporating Both . import numpy as np import pandas as pd # Load CSV file into a Pandas DataFrame df = pd.read_csv(&#39;nba_player_stats.csv&#39;) # Filter the DataFrame to only include stats for the specified player player_name = input(&quot;Enter player name: &quot;) player_stats = df[df[&#39;NAME&#39;] == player_name] if player_stats.empty: print(&quot;No stats found for that player.&quot;) else: # Convert the player stats to a NumPy array player_stats_np = np.array(player_stats[[&#39;PPG&#39;, &#39;RPG&#39;, &#39;APG&#39;, &#39;P+R+A&#39;]]) # Calculate the average of each statistic for the player player_stats_avg = np.mean(player_stats_np, axis=0) # Print out the average statistics for the player print(f&quot; nAverage stats for {player_name}:&quot;) print(f&quot;PPG: {player_stats_avg[0]:.2f}&quot;) print(f&quot;RPG: {player_stats_avg[1]:.2f}&quot;) print(f&quot;APG: {player_stats_avg[2]:.2f}&quot;) print(f&quot;P+R+A: {player_stats_avg[3]:.2f}&quot;) . NumPy impacts the given code because it performs operations on arrays efficiently. Specifically, it converts a Pandas DataFrame object to a NumPy array object, and then calculates the average statistics for a the player you guys inputted. Without NumPy, it would be more difficult and less efficient to perform these calculations on large data sets. It does the math for us. . import pandas as pd # Load the CSV file into a Pandas DataFrame df = pd.read_csv(&#39;/Users/josh/Repository-1/archive/nba_player_statistics.csv&#39;) # Filter the DataFrame to only include stats for a specific player (in this case, Jimmy Butler) player_name = &#39;Jimmy Butler&#39; player_stats = df[df[&#39;NAME&#39;] == player_name] # Display the stats for the player print(f&quot; nStats for {player_name}:&quot;) print(player_stats[[&#39;PPG&#39;, &#39;RPG&#39;, &#39;APG&#39;]]) . In this code segment below we use Pandas to read a CSV file containing NBA player statistics and store it in a DataFrame. . The reason Pandas is useful in this scenario is because it provides various functionalities to filter, sort, and manipulate the NBA data efficiently. In this code, the DataFrame is filtered to only include the stats for the player you guys choose. . import pandas as pd df = pd.read_csv(&#39;/Users/josh/Repository-1/archive/nba_player_statistics.csv&#39;) # Load CSV file into a Pandas DataFrame player_name = input(&quot;Enter player name: &quot;) # Get player name input from user player_stats = df[df[&#39;NAME&#39;] == player_name] # Filter the DataFrame to only include stats for the specified player if player_stats.empty: print(&quot;No stats found for that player.&quot;) else: # Check if the player exists in the DataFrame print(f&quot; nStats for {player_name}:&quot;) print(player_stats[[&#39;PPG&#39;, &#39;RPG&#39;, &#39;APG&#39;, &#39;P+R+A&#39;]]) # Display the stats for the player inputted. . Hack Problem . Use this link https://github.com/ali-ce/datasets to select a topic you are interested in. | Once you select your topic make sure it is a csv file and then you want to press on the button that says raw | After that copy that information and create a file with a name and .csv at the end and paste your information | Below is a start that you can use for your hacks | Your goal is to print 2 specific parts from data (example could be like population and country) | . import pandas as pd # read the CSV file df = pd.read_csv(&quot;starbucks.csv&quot;) # display the data in a table print(df) .",
            "url": "https://azeem-khan1.github.io/TripleAJ/notebooks/2023/04/19/tri3_lesson.html",
            "relUrl": "/notebooks/2023/04/19/tri3_lesson.html",
            "date": " • Apr 19, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Tri3_lesson",
            "content": "{ “cells”: [ { “attachments”: {}, “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# Tri 3 Lesson n”, “&gt; Reviewing Data Analysis n”, “- toc: true n”, “- categories: [Notebooks] n”, “- week: 30” ] }, { “attachments”: {}, “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# Lesson Portion 1: ReIntroduction to Data Analysis, NunPy, and Pandas” ] }, { “attachments”: {}, “cell_type”: “markdown”, “metadata”: {}, “source”: [ “### Data Analysis.” ] }, { “attachments”: {}, “cell_type”: “markdown”, “metadata”: {}, “source”: [ “Data Analysis is the process of examining data sets in order to find trends and draw conclusions about the given information. Data analysis is important because it helps businesses optimize their performances.” ] }, { “attachments”: {}, “cell_type”: “markdown”, “metadata”: {}, “source”: [ “### What is NunPy and Pandas” ] }, { “attachments”: {}, “cell_type”: “markdown”, “metadata”: {}, “source”: [ “Pandas library involves a lot of data analysis in Python. NumPy Library is mostly used for working with numerical values and it makes it easy to apply with mathematical functions.” ] }, { “attachments”: {}, “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# Lesson Portion 2 More into NunPy n”, “ n”, “### What we are covering; n”, “ n”, “- Explanation of NumPy and its uses in data analysis n”, “- Importing NumPy library n”, “- Creating NumPy arrays and performing intermediate array operations n”, “- Example of using NumPy for mathematical operations on data” ] }, { “attachments”: {}, “cell_type”: “markdown”, “metadata”: {}, “source”: [ “### Explanation of NunPy and its use in Data Analysis” ] }, { “attachments”: {}, “cell_type”: “markdown”, “metadata”: {}, “source”: [ “#### What is NunPy’s use in data analysis/ how to import NunPy.” ] }, { “attachments”: {}, “cell_type”: “markdown”, “metadata”: {}, “source”: [ “NumPy is a tool in Python that helps with doing math and data analysis. It’s great for working with large amounts of data, like numbers in a spreadsheet. NumPy is really good at doing calculations quickly and accurately, like finding averages, doing algebra, and making graphs. It’s used a lot by scientists and people who work with data because it makes their work easier and faster.” ] }, { “cell_type”: “code”, “execution_count”: null, “metadata”: {}, “outputs”: [], “source”: [ “import numpy as np” ] }, { “attachments”: {}, “cell_type”: “markdown”, “metadata”: {}, “source”: [ “### Example of Using NunPy in Our Project” ] }, { “attachments”: {}, “cell_type”: “markdown”, “metadata”: {}, “source”: [ “This code calculates the total plate appearances for a baseball player using NumPy’s sum() function, similar to the original example. It then uses NumPy to calculate the total number of bases (hits plus walks) for the player, and divides that by the total number of plate appearances to get the on-base percentage. The results are then printed to the console.” ] }, { “cell_type”: “code”, “execution_count”: 6, “metadata”: {}, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “Total plate appearances: 21 n”, “On-base percentage: 0.857 n” ] } ], “source”: [ “import numpy as np n”, “ n”, “# Example data n”, “player_hits = np.array([3, 1, 2, 0, 1, 2, 1, 2]) # Player’s hits in each game n”, “player_walks = np.array([1, 0, 0, 1, 2, 1, 1, 0]) # Player’s walks in each game n”, “player_strikeouts = np.array([2, 1, 0, 2, 1, 1, 0, 1]) # Player’s strikeouts in each game n”, “ n”, “# Intermediate array to store plate appearances (PA) for the player n”, “total_pa = np.sum(player_hits != 0) + np.sum(player_walks) + np.sum(player_strikeouts) n”, “ n”, “# Intermediate array to store on-base percentage (OBP) for the player n”, “total_bases = np.sum(player_hits) + np.sum(player_walks) n”, “obp = total_bases / total_pa n”, “ n”, “# Print the total plate appearances and on-base percentage for the player n”, “print(f&quot;Total plate appearances: {total_pa}&quot;) n”, “print(f&quot;On-base percentage: {obp:.3f}&quot;) n” ] }, { “attachments”: {}, “cell_type”: “markdown”, “metadata”: {}, “source”: [ “## Activity 1; PopCorn Hacks; Creating a NunPy Array and Analyzing the Data using Array Operations” ] }, { “cell_type”: “code”, “execution_count”: 2, “metadata”: {}, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “The 25th percentile height is 192.5 cm. n”, “The 50th percentile height is 198.0 cm. n”, “The 75th percentile height is 202.0 cm. n”, “There are 2 players in the top 10% tallest. n” ] } ], “source”: [ “import numpy as np n”, “ n”, “#Create a NumPy array of the heights of players in a basketball team n”, “heights = np.array([192, 195, 193, 200, 211, 199, 201, 198, 184, 190, 196, 203, 208, 182, 207]) n”, “ n”, “# Calculate the percentile rank of each player’s height n”, “percentiles = np.percentile(heights, [25, 50, 75]) n”, “ n”, “# Print the results n”, “print(&quot;The 25th percentile height is&quot;, percentiles[0], &quot;cm.&quot;) n”, “print(&quot;The 50th percentile height is&quot;, percentiles[1], &quot;cm.&quot;) n”, “print(&quot;The 75th percentile height is&quot;, percentiles[2], &quot;cm.&quot;) n”, “ n”, “# Determine the number of players who are in the top 10% tallest n”, “top_10_percent = np.percentile(heights, 90) n”, “tallest_players = heights[heights &gt;= top_10_percent] n”, “ n”, “print(&quot;There are&quot;, len(tallest_players), &quot;players in the top 10% tallest.&quot;) n” ] }, { “cell_type”: “code”, “execution_count”: null, “metadata”: {}, “outputs”: [], “source”: [ “# Starter Code n”, “ n”, “import numpy as np n”, “ n”, “#Create a NumPy array of the x n”, “x = np.array([]) n”, “ n”, “# Calculate the percentile rank of x n”, “y = np.percentile(x, [1,2,3]) n”, “ n”, “# Print the results n”, “print(&quot;&quot;, percentiles[0], &quot;&quot;) n”, “print(&quot;&quot;, percentiles[1], &quot;&quot;) n”, “print(&quot;&quot;, percentiles[2], &quot;&quot;) n”, “ n”, “# Determine the number of players who are in the top 10% x n”, “t = np.percentile(x, 90) n”, “z = x[x &gt;= t] n”, “ n”, “print(&quot;There are&quot;, len(z), &quot;players in the top 10% (x).&quot;) n” ] }, { “attachments”: {}, “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# Lesson Portion 3 More into Pandas” ] }, { “attachments”: {}, “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# Lesson Portion 4” ] }, { “attachments”: {}, “cell_type”: “markdown”, “metadata”: {}, “source”: [ “### Activity 3: Incorporating Both” ] }, { “cell_type”: “code”, “execution_count”: null, “metadata”: {}, “outputs”: [], “source”: [ “import numpy as np n”, “import pandas as pd n”, “# Load CSV file into a Pandas DataFrame n”, “df = pd.read_csv(‘nba_player_stats.csv’) n”, “# Filter the DataFrame to only include stats for the specified player n”, “player_name = input(&quot;Enter player name: &quot;) n”, “player_stats = df[df[‘NAME’] == player_name] n”, “if player_stats.empty: n”, “ print(&quot;No stats found for that player.&quot;) n”, “else: n”, “ # Convert the player stats to a NumPy array n”, “ player_stats_np = np.array(player_stats[[‘PPG’, ‘RPG’, ‘APG’, ‘P+R+A’]]) n”, “ # Calculate the average of each statistic for the player n”, “ player_stats_avg = np.mean(player_stats_np, axis=0) n”, “ # Print out the average statistics for the player n”, “ print(f&quot; nAverage stats for {player_name}:&quot;) n”, “ print(f&quot;PPG: {player_stats_avg[0]:.2f}&quot;) n”, “ print(f&quot;RPG: {player_stats_avg[1]:.2f}&quot;) n”, “ print(f&quot;APG: {player_stats_avg[2]:.2f}&quot;) n”, “ print(f&quot;P+R+A: {player_stats_avg[3]:.2f}&quot;)” ] }, { “attachments”: {}, “cell_type”: “markdown”, “metadata”: {}, “source”: [ “NumPy impacts the given code because it performs operations on arrays efficiently. Specifically, it converts a Pandas DataFrame object to a NumPy array object, and then calculates the average statistics for a the player you guys inputted. Without NumPy, it would be more difficult and less efficient to perform these calculations on large data sets. It does the math for us.” ] }, { “cell_type”: “code”, “execution_count”: null, “metadata”: {}, “outputs”: [], “source”: [ “import pandas as pd n”, “# Load the CSV file into a Pandas DataFrame n”, “df = pd.read_csv(‘/Users/josh/Repository-1/archive/nba_player_statistics.csv’) n”, “# Filter the DataFrame to only include stats for a specific player (in this case, Jimmy Butler) n”, “player_name = ‘Jimmy Butler’ n”, “player_stats = df[df[‘NAME’] == player_name] n”, “# Display the stats for the player n”, “print(f&quot; nStats for {player_name}:&quot;) n”, “print(player_stats[[‘PPG’, ‘RPG’, ‘APG’]])” ] }, { “attachments”: {}, “cell_type”: “markdown”, “metadata”: {}, “source”: [ “#### In this code segment below we use Pandas to read a CSV file containing NBA player statistics and store it in a DataFrame. n”, “#### The reason Pandas is useful in this scenario is because it provides various functionalities to filter, sort, and manipulate the NBA data efficiently. In this code, the DataFrame is filtered to only include the stats for the player you guys choose.” ] }, { “cell_type”: “code”, “execution_count”: null, “metadata”: {}, “outputs”: [], “source”: [ “import pandas as pd n”, “df = pd.read_csv(‘/Users/josh/Repository-1/archive/nba_player_statistics.csv’) n”, “# Load CSV file into a Pandas DataFrame n”, “player_name = input(&quot;Enter player name: &quot;) n”, “# Get player name input from user n”, “player_stats = df[df[‘NAME’] == player_name] n”, “# Filter the DataFrame to only include stats for the specified player n”, “if player_stats.empty: n”, “ print(&quot;No stats found for that player.&quot;) n”, “else: n”, “# Check if the player exists in the DataFrame n”, “ print(f&quot; nStats for {player_name}:&quot;) n”, “print(player_stats[[‘PPG’, ‘RPG’, ‘APG’, ‘P+R+A’]]) n”, “# Display the stats for the player inputted.” ] }, { “attachments”: {}, “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# Hack Problem n”, “- Use this link https://github.com/ali-ce/datasets to select a topic you are interested in. n”, “- Once you select your topic make sure it is a csv file and then you want to press on the button that says raw n”, “- After that copy that information and create a file with a name and .csv at the end and paste your information n”, “- Below is a start that you can use for your hacks n”, “- Your goal is to print 2 specific parts from data (example could be like population and country)” ] }, { “cell_type”: “code”, “execution_count”: null, “metadata”: {}, “outputs”: [], “source”: [ “import pandas as pd n”, “# read the CSV file n”, “df = pd.read_csv(&quot;starbucks.csv&quot;) n”, “# display the data in a table n”, “print(df)” ] } ], “metadata”: { “kernelspec”: { “display_name”: “base”, “language”: “python”, “name”: “python3” }, “language_info”: { “codemirror_mode”: { “name”: “ipython”, “version”: 3 }, “file_extension”: “.py”, “mimetype”: “text/x-python”, “name”: “python”, “nbconvert_exporter”: “python”, “pygments_lexer”: “ipython3”, “version”: “3.9.12” }, “orig_nbformat”: 4 }, “nbformat”: 4, “nbformat_minor”: 2 } .",
            "url": "https://azeem-khan1.github.io/TripleAJ/2023/04/19/tri3_lesson.ipynb",
            "relUrl": "/2023/04/19/tri3_lesson.ipynb",
            "date": " • Apr 19, 2023"
        }
        
    
  

  
  
      ,"page0": {
          "title": "About This Site",
          "content": "About this site . This is a group site for TripleAJ in Mr. Mortensen’s period 3 Computer Science Principles course (Trimester 2). . Created by Azeem Khan, Ahad, Josh Williams, and Akshat. .",
          "url": "https://azeem-khan1.github.io/TripleAJ/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  

  

  

  
  

  
  

  
  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://azeem-khan1.github.io/TripleAJ/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}