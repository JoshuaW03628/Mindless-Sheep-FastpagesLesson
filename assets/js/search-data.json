{
  
    
        "post0": {
            "title": "Tri 3 Lesson",
            "content": "Lesson Portion 1: ReIntroduction to Data Analysis, NunPy, and Pandas . Data Analysis. . Data Analysis is the process of examining data sets in order to find trends and draw conclusions about the given information. Data analysis is important because it helps businesses optimize their performances. . What is NunPy and Pandas . Pandas library involves a lot of data analysis in Python. NumPy Library is mostly used for working with numerical values and it makes it easy to apply with mathematical functions. . Lesson Portion 2 More into NunPy . What we are covering; . Explanation of NumPy and its uses in data analysis | Importing NumPy library | Creating NumPy arrays and performing intermediate array operations | Example of using NumPy for mathematical operations on data | . Explanation of NunPy and its use in Data Analysis . What is NunPy&#39;s use in data analysis/ how to import NunPy. . NumPy is a tool in Python that helps with doing math and data analysis. It&#39;s great for working with large amounts of data, like numbers in a spreadsheet. NumPy is really good at doing calculations quickly and accurately, like finding averages, doing algebra, and making graphs. It&#39;s used a lot by scientists and people who work with data because it makes their work easier and faster. . import numpy as np . Activity 1; Creating a NunPy Array and Analyzing the Data using Array Operations . import numpy as np #Create a NumPy array of the heights of players in a basketball team heights = np.array([192, 195, 193, 200, 211, 199, 201, 198, 184, 190, 196, 203, 208, 182, 207]) # Calculate the percentile rank of each player&#39;s height percentiles = np.percentile(heights, [25, 50, 75]) # Print the results print(&quot;The 25th percentile height is&quot;, percentiles[0], &quot;cm.&quot;) print(&quot;The 50th percentile height is&quot;, percentiles[1], &quot;cm.&quot;) print(&quot;The 75th percentile height is&quot;, percentiles[2], &quot;cm.&quot;) # Determine the number of players who are in the top 10% tallest top_10_percent = np.percentile(heights, 90) tallest_players = heights[heights &gt;= top_10_percent] print(&quot;There are&quot;, len(tallest_players), &quot;players in the top 10% tallest.&quot;) . The 25th percentile height is 192.5 cm. The 50th percentile height is 198.0 cm. The 75th percentile height is 202.0 cm. There are 2 players in the top 10% tallest. . Activity 2: Create Your Own NunPy Array . import numpy as np #Create a NumPy array of the x x = np.array([]) # Calculate the percentile rank of x y = np.percentile(x, [1,2,3]) # Print the results print(&quot;&quot;, percentiles[0], &quot;&quot;) print(&quot;&quot;, percentiles[1], &quot;&quot;) print(&quot;&quot;, percentiles[2], &quot;&quot;) # Determine the number of players who are in the top 10% x t = np.percentile(x, 90) z = x[x &gt;= t] print(&quot;There are&quot;, len(z), &quot;players in the top 10% (x).&quot;) . Lesson Portion 3 More into Pandas . Lesson Portion 4 . Activity 3: Incorporating Both . import pandas as pd # Load the CSV file into a Pandas DataFrame df = pd.read_csv(&#39;/Users/josh/Repository-1/archive/nba_player_statistics.csv&#39;) # Filter the DataFrame to only include stats for a specific player (in this case, Jimmy Butler) player_name = &#39;Jimmy Butler&#39; player_stats = df[df[&#39;NAME&#39;] == player_name] # Display the stats for the player print(f&quot; nStats for {player_name}:&quot;) print(player_stats[[&#39;PPG&#39;, &#39;RPG&#39;, &#39;APG&#39;]]) . In this code segment below we use Pandas to read a CSV file containing NBA player statistics and store it in a DataFrame. . The reason Pandas is useful in this scenario is because it provides various functionalities to filter, sort, and manipulate the NBA data efficiently. In this code, the DataFrame is filtered to only include the stats for the player you guys choose. . import pandas as pd df = pd.read_csv(&#39;/Users/josh/Repository-1/archive/nba_player_statistics.csv&#39;) # Load CSV file into a Pandas DataFrame player_name = input(&quot;Enter player name: &quot;) # Get player name input from user player_stats = df[df[&#39;NAME&#39;] == player_name] # Filter the DataFrame to only include stats for the specified player if player_stats.empty: print(&quot;No stats found for that player.&quot;) else: # Check if the player exists in the DataFrame print(f&quot; nStats for {player_name}:&quot;) print(player_stats[[&#39;PPG&#39;, &#39;RPG&#39;, &#39;APG&#39;, &#39;P+R+A&#39;]]) # Display the stats for the player inputted. . Hack Problem . Use this link https://github.com/ali-ce/datasets to select a topic you are interested in. | Once you select your topic make sure it is a csv file and then you want to press on the button that says raw | After that copy that information and create a file with a name and .csv at the end and paste your information | Below is a start that you can use for your hacks | Your goal is to print 2 specific parts from data (example could be like population and country) | . import pandas as pd # read the CSV file df = pd.read_csv(&quot;starbucks.csv&quot;) # display the data in a table print(df) .",
            "url": "https://azeem-khan1.github.io/TripleAJ/notebooks/2023/04/19/tri3_lesson.html",
            "relUrl": "/notebooks/2023/04/19/tri3_lesson.html",
            "date": " • Apr 19, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "3.9 and 3.11 Grades",
            "content": "See below or click here .",
            "url": "https://azeem-khan1.github.io/TripleAJ/grades",
            "relUrl": "/grades",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "3.9 And 3.11 Grades",
            "content": "Group Members: Azeem Khan, Akshat Parikh, Ahad Biabani, Josh Williams . Grades below are arranged in alphabetical order, please find your name and report it to Mr. Mortensen. . Extensions were granted to a few people who really needed it. You must have asked for an extension during class and consulted all of us. If you have an “Extension Granted” label in your submission date, the late penalty will not apply. . Late submissions will be bolded, any late submission will deduct 0.1 from your final grade. . Please see our rubric below the grade table to understand why you received your grade. If you still have inquiries for your grade, please approach us during period 3/or on Slack. . Name Submission Date . Due December 9th by 5:00 PM . Graded By Grade for HW + Participation . Out of 0.9 . Grade for hacks . Optional + opportunity for 1/1 . Comments Total Grade . Abdullah Abdul-Aziz | December 9th | Ahad Biabani | 0/0.9 | 0/0.1 | NO SUBMISSION . You can still turn in your homework and hacks for some credit. . | 0/1 | . Luke Angelini | December 9th | Ahad Biabani | 0.8/0.9 | 0/0.1 | Drawing and some code was provided. Code was given in the form of a screenshot and not in the form we wanted. Very limited code was provided as well. Flowchart was done in google drawings and it was neat and organized No hacks were submitted. | 0.8/1 | . Evan Aparri | December 9th | Ahad Biabani | 0/0.9 | 0/0.1 | NO SUBMISSION . You can still turn in your homework and hacks for some credit. . | 0/1 | . James Armstrong | December 9th | Azeem Khan | 0.9/0.9 | 0/0.1 | Well organized flowchart that serves the intended purpose and outlines a working algorithm. Python code runs smoothly and accurately. No hacks were submitted, though classwork practice was complete. Good work for completing everything that was necessary, I look forward to seeing how you apply what we taught you. | 0.9/1 | . Trey Blalock | December 8th | Azeem Khan | 0.6/0.9 | 0/0.1 | Incomplete homework. Flowchart was decent, but did not really serve the intended purpose. The output would be a Boolean value instead of the highest number that was generated. The link to the python algorithm that was supposed to correspond with the flowchart just led to a default Fastpages post with code for a simple number-squaring algorithm that seemed to have an error. Did not submit any optional hacks either. | 0.6/1 | . Kalani Cabral-Omana | December 9th . Extension Granted . | Azeem Khan | 0.8/0.9 | 0.1/0.1 | Python code runs beautifully and as intended. Flowchart could use more details about what the algorithm is actually doing. Also, it doesn’t match what the actual program is doing, but in theory, it would work. Hacks could be a little more extraordinary, but good work for doing what is needed. | 0.9/1 | . Aniket Chakradeo | December 9th . (LATE) . | Akshat Parikh | 0.8/0.9 | 0/0.1 | You did a great job following through the presentation and running all the examples. By looking at your notes I am confident that you understand our topic. Your flowchart is also complete and shows demonstration of understanding, however it definitely could have been neater. Since you submitted late you were deducted 0.1. Also hacks were not completed, therefore your final grade is 0.8/1. | 0.8/1 | . Gene Chang | December 9th | Azeem Khan | 0.9/0.9 | 0.1/0.1 | Flowchart is well organized and very logical / makes sense. Would work in theory. Python code does not follow the same steps outlined in the flowchart, as it should’ve, however it still works. Also completed a hack: reward +0.1. | 1/1 | . Jeffery Fonseca | December 9th | Josh Williams | 0/0.9 | 0/0.1 | NO SUBMISSION . You can still turn in your homework and hacks for some credit. . | 0/1 | . Sreeja Reddy Gangapuram | December 9th | Josh Williams | 0.9/0.9 | 0.1/0.1 | Completed homework with in depth responses to the homework and hacks. Flowchart is simple and complete. All code is run in the lesson, Well Done! Full credit for hacks as well. I hope you learned something from us and can apply it in the future. | 1/1 | . Aiden Huynh | December 7th | Azeem Khan | 0.9/0.9 | 0/0.1 | Completed homework with both efficiency and accuracy. Very straightforward flowchart and working algorithm. Different from the answer key, but works nonetheless. Demonstrates knowledge of material and proficiency in the process of writing algorithms. Did not complete optional hacks, therefore did not earn 1/1. | 0.9/1 | . Dhruva Iyer | December 9th | Josh Williams | 0/0.9 | 0/0.1 | NO SUBMISSION . You can still turn in your homework and hacks for some credit. . | 0/1 | . Ekamjot Kaire | December 9th | Josh Williams | 0.8/0.9 | 0.1/0.1 | HW is well done, added output from the algorithm. All classwork was fully completed. Showed signs of understanding the lesson. No hacks but overall well done! Good work with the activities, keep up the good participation! | 0.9/1 | . Soham Kamat | December 9th . (LATE) . | Josh Williams | 0.8/0.9 | 0.05/0.1 | Flow chart is messy but complete. Hw is complete and accomplishes the desired output. + Hacks for 3.9 Part 3, didn’t explain your steps in creating the code +0.05. | 0.85/1 . Late deduction . | . Jagger Klein | December 9th | Azeem Khan | 0.7/0.9 | 0/0.1 | Algorithm is effective and works as intended with no errors. Also utilizes an imported module and a list. I could have seen a little more participation in terms of understanding our lesson through running all blocks of code and even adding on to them. No flowchart was submitted and hacks were submitted as well. | 0.7/1 | . Jeffrey Lee | December 9th . (LATE) . | Josh Williams | 0.7/0.9 | 0.1/0.1 | Algorithm creates the desired output and the flowchart matches the code exactly. There is a little bit of unnecessary code in there however there is evidence shown of interacting with the lesson. No hacks. Well Done! (late penalty applied) | 0.8/1 . Late deduction . | . Toby Leeder | December 9th . (LATE) . | Akshat Parikh | 0.8/0.9 | 0/0.1 | Excellent work with the flowchart, it is neat and shows every step in an intricate manner. You also did a great job following all the steps for our lesson and completing every activity. Unfortunately you were deducted 0.1 due to your late submission. I also see no hacks. | 0.8/1 . Late deduction . | . Alan Liu-Sui | December 9th | Akshat Parikh | 0.85/0.9 | 0.05/0.1 | Solid participation, all activities are completed, notes are transferred as well. Hacks are also completed and so is the flowchart which is organized and colorful as well. You however didn’t seem to be engaging in the first activity which is why I’m deducting 0.05. Great effort overall and good work with the flowchart! | 0.9/1 | . Sarah Liu | December 11th . (LATE) . | Akshat Parikh | 0.7/0.9 | 0.1/0.1 | The homework and hacks were very well done, however the flowchart could have been better. The notes showed both understanding and interaction with the lesson. it was submitted late so -0.1, well done. | 0.7/1 . Late deduction . | . Martin Nguyen | December 9th Extension Granted | Akshat Parikh | 0.8/0.9 | 0.1/0.1 | Good work with the flowchart, you did your flowchart differently and I like that. Also, great work with the hacks, you did in a more complex manner which all of us really liked to see. I hope you know how to use the knowledge we have taught you upon algorithms and binary search. If you added comments and a little bit more complexity to your flowchart you could have gotten full credit. Keep up the good effort! | 0.9/1 | . Vivian Ni | December 9th | Akshat Parikh | 0.9/0.9 | 0.1/0.1 | Wow! Great work with the flowchart, all steps are listed in an organized manner, also great job adding comments on the side for your flowchart. All participation was completed, activities were run, and you showed a clear demonstration of understanding towards all four of our lessons. All hacks were completed as well in a complex manner that deserved full credit. Keep up the great effort! | 1/1 | . Giannina Ortega Rico | December 9th | Ahad Biabani | 0/0.9 | 0/0.1 | NO SUBMISSION . You can still turn in your homework and hacks for some credit. . | 0/1 | . Tanay Patel | December 9th | Ahad Biabni | 0/0.9 | 0/0.1 | NO SUBMISSION . You can still turn in your homework and hacks for some credit. . | 0/1 | . Dash Penning | December 9th | Azeem Khan | 0.9/0.9 | 0.1/0.1 | Flawless flowchart. Does everything intended with accuracy and clarity. The Python algorithm runs smoothly as well. Did complete the hacks as well: rewarded +0.1. Great job Dash, I expect you to continue your flawless work! | 1/1 | . Samit Poojary | December 10th . Extension Granted . | Josh Williams | 0.9/0.9 | 0.1/0.1 | Flowchart is complete but messy, so I’ll have to deduct 0.1 for that. Homework is complete with a clear understanding of the content. All activities were completed in an organized manner. Shows interaction with the lesson, + binary search hacks. Very well done! Keep up the effort! | 0.9/1 | . Parav Salaniwal | December 9th . Extension Granted . | Ahad Biabani | 0.9/0.9 | 0.02/0.1 | Flowchart is present and complete and neatly done. Hacks are somewhat done. The Python algorithm is present and complete. All necessary homework is complete. All four activities are completed. No hacks are done so some points are given. | 0.92/1 | . Shreya Sapkal | December 9th | Josh Williams | 0/0.9 | 0/0.1 | NO SUBMISSION . You can still turn in your homework and hacks for some credit. . | 0/1 | . Devon Shepherd | December 9th | Akshat Parikh | 0.1/0.9 | 0/0.1 | Your link does not lead me to your lesson and hacks. I’m very confused on where to navigate because you listed every single of your lesson’s as, “Title” so I have no idea if you even completed the work. I also don’t see any flowchart submission. Send me the right link and I can review it for some credit during class. I have given you 0.1 credit so far because you submitted before the due date. You were also notified on slack. | 0.1/1 | . Jishnu Singiresu | December 9th | Josh Williams | 0.9/0.9 | 0.1/0.1 | Homework has desired output and all code is running and complete from the lesson. All the activities are completed and you show full understanding for algorithms and binary search. Flowchart is complete and code matches it. + Binary search hacks. Very well done! My first 1! | 1/1 | . Derek Sol | December 9th | Akshat Parikh | 0.8/0.9 | 0.1/0.1 | Flowchart is also good and organized, if you added comments between the arrows I would have given you full credit. All hacks were completed, the hacks ran successfully and fulfilled our criteria for full credit. Make sure to add the WGET for our lesson to your blog. | 0.9/1 | . Yuri Subramaniam | December 9th | Azeem Khan | 0.6/0.9 | 0.1/0.1 | Flowchart could be better organized, and it looks like it returns a Boolean value instead of the highest number that was generated. Did not submit any algorithm in Python that corresponds with the flowchart, as outlined in the assignment. However, completed both hacks, one of which does not work as intended (fibonacci sequence), but both are impressive. | 0.7/1 | . Mani Taleban | December 9th | Azeem Khan | 0.9/0.9 | 0/0.1 | Completed the homework assignment. Flowchart was well organized. Some steps could use clarification (what happens at a “checkpoint”?), however the design of the algorithm is unique and efficient. The Python algorithm works beautifully. Did not submit any optional hacks for a 1/1. | 0.9/1 | . Tirth Thakkar | December 9th . Extension Granted . | Ahad Biabani | 0.85/0.9 | 0.1/0.1 | Very well done, great job and very neat. Flow chart was present along with everything else needed. 0.05 point not earned because it wasn&#39;t committed to fastpages. Overall very good, hacks were also completed. I hope you learned something from our lesson and can apply it in the future. | 0.95/1 | . Ethan Troung | December 9th . (LATE) . | Akshat Parikh | 0.9/0.9 | 0/0.1 | Flowchart is completed and well drawn. I’m giving you credit for the 4 activities completed during the lesson. You submitted late so I am deducting 0.1. Also, make sure to look over the hacks because you could have earned an extra point. | 0.9/1 . Late deduction . | . Johanthan Wu | December 9th | Azeem Khan | 0.9/0.9 | 0/0.1 | Flowchart is very straightforward, simple, and logical. Code runs perfectly as well, making use of an imported module. All activities are good, solid participation. No hacks were submitted, therefore no 1/1, keep up the striving effort. | 0.9/1 | . Max Wu | December 9th | Azeem Khan | 0.9/0.9 | 0.1/0.1 | I love that your process of completing the task is unique to everyone else’s. The flowchart is very well organized, but could use some more detail about how certain steps will be carried out + more conditionals. However, the code looks and works perfectly and has helpful comments. Nice job! Also completed both hacks while demonstrating that you understand the content. | 1/1 | . Grading Scale Rubric: . If you still have inquiries for your grade please approach us during period 3/or direct message us on Slack. . 3.9-3.11 Rubric 1.00 0.8-0.9 0.5 0-0.1 . Participation | 0.4/0.4 - All four lesson’s activities were completed (3.9 parts 1/2/3 and 3.11) - demonstrates learning and participation, including all vocab and target points. | 0.4/0.4 - All four lesson’s activities were completed (3.9 parts 1/2/3 and 3.11) - demonstrates learning and participation including all vocab and target points. | 0.2/0.4 - Not all four lesson’s activities were not completed - demonstrates some learning and participation. | 0/0.4 - less than 2 activities were completed, displayed lack of participation or no participation | . Homework | 0.3/0.3 - Flowchart was completed and organized. Flowchart is very neat and can help anyone who is new to the concept to understand what the flowchart is trying to comprehend. | 0.3/0.3 - Flowchart was completed and organized. Flowchart is very neat and can help anyone who is new to the concept to understand what the flowchart is trying to comprehend. | 0.2/0.3 - Flowchart was completed, little less organized. | 0/0.3 - No flowchart | . Hacks | 0.1/0.1 - Hacks were completed and showed learning in an exceeding matter. Student demonstrates proficiency for our lesson. | 0/1 - No hacks were completed . (0.05 if hacks were somewhat completed but are broad/incorrect) - some may receive 0.95 because of this . | 0/1 - No hacks were completed | 0/1 - No hacks were completed | . Submission | 0.1/0.1 - Submitted on time | 0.1/0.1 - Submitted on time | 0.1/0.1 - Submitted on time | 0/0.1 - Late or no submission | . Final Grade | 1/1 | 0.8-0.9/1 . (0.95 for some) . | 0.4-0.7/1 | 0-0.1/1 | . Late penalties apply to any submission after 5:00 PM on December 9th unless an extension is provided. .",
            "url": "https://azeem-khan1.github.io/TripleAJ/2022/12/12/3.9-and-3.11-Grades.html",
            "relUrl": "/2022/12/12/3.9-and-3.11-Grades.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "3.9 and 3.11 Lesson",
            "content": "First Things First: WGET . wget allows you to essentially clone someone elses file on Github into a directory of your choosing You are able to edit your own copy of the file without affecting the original | . | . Here&#39;s a quick how-to . Open your VSCode terminal (Terminal &gt; New Terminal) . | Navigate to your Fastpages Blog using cd . | Navigate to the _notebooks directory in your Fastpages . | Copy and paste this into the terminal: wget https://raw.githubusercontent.com/Azeem-Khan1/TripleAJ/master/_notebooks/2022-12-06-lessonComplete.ipynb . | You&#39;re all set! you can use this copy of our notebook to help you take notes and participate during the lesson . Please raise your hand if you are having trouble with wget and we will come around and help you | . | Note: if you have a separate notebook that you take notes on and you also want to do your practice in that notebook, you can copy and paste cells from this notebook by left clicking next to any markdown or code cell (indicating that it is selected), do ctl+c or cmd+c, and go to the desired notebook and do ctl+v or cmd+v (if that doesn&#39;t work, try just c and v with no ctl or cmd) | . 3.9 Developing Algorithms . Lesson . The lesson will start off with introducing what algorithms are and what they do, moreover, what their significance is. . 3.9 Lesson 1 has the objective to teach the student of the outcome of similar algorithmic concepts and similar algorithms. In this lesson, you will see different ways on how algorithms are developed. . Lesson created by Akshat P. . Lesson 1 | Defining Algorithms . What is an algorithm? An algorithm is a process or set of rules to be followed through CODE. There are set limitations, this is what makes algorithms fun, you can your imagination and create whatever you wan with your own instructions! . Algorithms can be written in different ways and still accomplish the same tasks . | Algorithms that appear similar can yield different side effects or results. . | Some conditional statements can be written as the same as Boolean expressions (VICE VERSA) . | Different algorithms can be developed or use dto solve the same problem. . | . Example 1 | What happens if we test it with 54 degrees? . Record what your outputs are when you enter 54 and then 95, does the algorithm yield the same result? . The conditional below is nested . temp = int(input(&quot;Select a temperature from 0 to 99 degrees F&quot;)) if (temp &gt;= 90): print(&quot;It&#39;s too hot outside!&quot;) else: if (temp &gt;= 65): print(&quot;Sure I will play outside!&quot;) else: print(&quot;It is too cold outside!&quot;) # Input 54 and then 95, what do you notice? . Example 2 | What happens if we test 95 degrees? . Record what your outputs are when you enter 54 and then 95, does the algorithm yield the same result this time? . The condition below is not nested . temp = int(input(&quot;Select a temperature from 0 to 99 degrees F&quot;)) if (temp &gt;= 90): print(&quot;It&#39;s too hot outside!&quot;) if (temp &gt;= 65): print(&quot;Sure I will play outside?&quot;) if (temp &lt; 65): print(&quot;It is too cold outside!&quot;) # Input 54 and then Input 95, what do you notice? . Even though an algorithm&#39;s code can look the same, you have to be careful, they can always yield different results. When constructing algorithms you want to make sure that your code corresponds with what you want as your output. You set the limit of your code and you decide what the code&#39;s output is. . Conditionals vs. Booleans . WRITE HERE . Example 3 | Conditionals vs Booleans . The following algorithms are intended to sum the odd numbers from 1-9. Which algorithms work as intended? . . First block . sum = 1 counter = 3 #iteration var = 0 while (var &lt;= 4): #while the var is &lt;= 4, it executes those commands, once it exceeds it hits the else command sum = sum + counter counter = counter + 2 var = var + 1 # now go through the whole thing 4 times, this is an iteration, a vital part of algorithms. else: print(sum) . 36 . Second block . sum = 0 counter = 9 #iteration while (counter &lt; 1): #while the var is &lt;= 4, it executes those commands, once it exceeds it hits the else command sum = sum + counter counter = counter - 2 # now go through the whole thing 4 times, this is an iteration, a vital part of algorithms. else: print(sum) . 0 . Flowcharts (START OF AZEEM&#39;S SECTION) . Flowcharts can help you visualize the functionality of an algorithm . | They are a good way to double check whether or not your algorithm is achieving its purpose . | . How To Set Up A Flowchart . label the start point . | Define any and all variables you may need . | Consider the first question you want the algorithm to ask . | Write what you want the algorithm to do if the answer to that question is yes (or true) . | Write what you want the algorithm to do if the answer to that question is no (or false) . Steps 3-5 are the steps to creating code that uses a process called selection (you can convert the question from step 3 to a conditional if-statement in code) | . | Write out all necessary steps for the algorithm to function properly . | You may want your algorithm to iterate some steps until a condition is met . You can write the steps that need to be repeated, then draw an arrow from the last step to a step above that contains a conditional statement (See Example B) | . | determine a way to reach the end goal | Selection vs. Iteration . Example A . Consider this situation: You are shopping for your favorite food at your favorite supermarket | You see that there is a sale on wheat products for 35% off | There is another sale on produce for 20% off | Tax on all items is 8% | Your TASK: calculate the cost of your favorite item using an algorithm! (start out with a flowchart) | . | . Example A Possible Solution (using a flowchart) . Example B .",
            "url": "https://azeem-khan1.github.io/TripleAJ/Lesson",
            "relUrl": "/Lesson",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "3.9 Lesson 3",
            "content": "Week 9 Lesson 3 Developing Algorithms . “What Will we Learn in this Lesson?” . For Algorithms How to combine and/or modify an existing algorithm. | . | Benefits of combining algorithms can reduce development time, testing time, and simplify the identification of errors. | . | . Example in Class . . Rules . step/rule 1: start with any positive integer | step/rule 2: if the preceding term is even; divide by 2 | step/rule 3: if the preceding term is odd; multiply by 3 and add 1 | step/rule 4: repeat steps until you arrive at 1 | fact: the sequence should ALWAYS end up at 1 if repeated. | . Algorithm to Start (Determining Whether a Number is Even or Odd); . display(“choose value for x”) . x &lt;- input() . if(n mod2 = 0) . { Display (“n is even”) } . ELSE . { Display (“n is odd”) } . how can we modify this code to match our goal . Hint: uses arithmetic operations | Hint: look at the steps of the equation and try and modify it to fit them | Must display all numbers used in it | . Solution . Step 1 . adding steps 2 and 3 from the original equation | . display(“choose value for x”) . x &lt;- input() . if(x mod 2 = 0) { x &lt;- n/2 # right here } ELSE { x &lt;- n * 3 + 1 . # and here } . Step 2 . step/rule 4; here we add the loop | . display(“choose value for x”) . x &lt;- input() Repeat until (n=1) # Right here { if(x mod 2 = 0) { x &lt;- n/2 } ELSE { x &lt;- n * 3 + 1 } } . Final Step/Step 3 . Displaying all numbers in the sequence | . display(“choose value for x”) . x &lt;- input() Display(x) Repeat until (n=1) { if(x mod 2 = 0) { x &lt;- n/2 } ELSE { x &lt;- n * 3 + 1 } Display(n) } . Takeaways . You can use code you’ve previously wrote in order to make a project easier. | Breaking algorithms down into steps can make things easier and more simple. | . Hacks . create another algorithm using a famous mathematical algorithm such as the “collatz conjecture.” and explain your steps in a post on a blog. | .",
            "url": "https://azeem-khan1.github.io/TripleAJ/3-9/Lesson3",
            "relUrl": "/3-9/Lesson3",
            "date": " • Dec 4, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "3.9 Lesson 1",
            "content": "Lesson . The lesson will start off with introducing what algorithms are and what they do, moreover, what their significance is. . 3.9 Lesson 1 has the objective to teach the student of the outcome of similar algorithmic concepts and similar algorithms. In this lesson, you will see different ways on how algorithms are developed. . Lesson created by Akshat P. . Lesson 1 | Defining Algorithms . What is an algorithm? An algorithm is a process or set of rules to be followed through CODE. There are set limitations, this is what makes algorithms fun, you can your imagination and create whatever you wan with your own instructions! . Algorithms can be written in different ways and still accomplish the same tasks . | Algorithms that appear similar can yield different side effects or results. . | Some conditional statements can be written as the same as Boolean expressions (VICE VERSA) . | Different algorithms can be developed or use dto solve the same problem. . | . EXAMPLE #1 - Too Hot, too cold, or just right? . What similarities do you notice about the two algorithms? . If the boolean expressions are the same, does that mean the results will be the same? . . So right here, the condition on the left is nested, the condition on the right is not nested. . You have to be careful, even if they look the same, they might not yield the same result. . What happens if we assign 54 to our algorithm? . When we alter and set limitations to our code, the algorithm would not work if we were to input a variable that does not satisfy the rules for the algorithm. . . What happens if we assign 95 to our algorithm? . Since 95 is greater than 90, it is true, however else is also to be considered, and so this satisfied the conditionals (we learned this a week ago). Since 95 is also greater than or equal to 65, the algorithm satisfies. . Therefore both situations DO NOT yield the same results. . This is a simple overview on how algorithms work along with conditionals. . . Conditionals vs Booleans .",
            "url": "https://azeem-khan1.github.io/TripleAJ/3-9Lesson1",
            "relUrl": "/3-9Lesson1",
            "date": " • Nov 20, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "3.9 Lesson 2",
            "content": "Lesson created by Azeem Khan . Lesson Overview . Focused on creating or developing algorithms using a flowchart or natural language | An algorithm can contain selection or iteration Either way, they need to be sequenced properly in order to have the intended result | . | . How to set up a Flowchart . A Flowchart can help you visualize the functionality of an algorithm | Step 1: label the start point | Step 2: consider the first question you want the algorithm to ask | Step 3: write what you want the algorithm to do if the answer to that question is true | Step 4: repeat step 3, but this time, if the answer is false | Step 5: write out all necessary steps for the algorithm to function properly | Step 6: determine a way to reach the end goal | . Selection vs. Iteration . Example A . Consider this situation: You are shopping for your favorite food at your favorite supermarket | You see that there is a sale on wheat products for 35% off | There is another sale on produce for 20% off | Tax on all items is 8% | Your TASK: calculate the cost of your favorite item using an algorithm! (start out with a flowchart) | . | . Example A Possible Solution (using a flowchart) . . Example B .",
            "url": "https://azeem-khan1.github.io/TripleAJ/3-9/Lesson2",
            "relUrl": "/3-9/Lesson2",
            "date": " • Nov 19, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "3.9 Part 1 - Developing Algorithms",
            "content": "Lesson Overview/Plan . The lesson will start off with introducing what algorithms are and what they do, moreover, what their significance is. . 3.9 Lesson 1 has the objective to teach the student of the outcome of similar algorithmic concepts and similar algorithms. In this lesson, you will see different ways on how algorithms are developed. . For the lesson, we are going to take detailed notes for the entire three videos and from those notes, we are going to try to make the lesson as applicable as possible, and so we are thinking of potentially making a video with our own API and algorithm or explaining other APIs that have similar algorithms, this would be innovative. . Some ideas: . Blackjack | Flip a coin | 8 Ball | . Notes . Objective . Compare multiple algorithms to determine if they yield the same side effect or result. .",
            "url": "https://azeem-khan1.github.io/TripleAJ/3-9Lesson1",
            "relUrl": "/3-9Lesson1",
            "date": " • Nov 17, 2022"
        }
        
    
  

  
  
      ,"page0": {
          "title": "About This Site",
          "content": "About this site . This is a group site for TripleAJ in Mr. Mortensen’s period 3 Computer Science Principles course (Trimester 2). . Created by Azeem Khan, Ahad, Josh Williams, and Akshat. .",
          "url": "https://azeem-khan1.github.io/TripleAJ/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  

  

  

  
  

  
  

  
  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://azeem-khan1.github.io/TripleAJ/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}